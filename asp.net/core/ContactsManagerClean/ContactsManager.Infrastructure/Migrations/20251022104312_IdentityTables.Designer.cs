// <auto-generated />
using System;
using Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ContactsManager.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251022104312_IdentityTables")]
    partial class IdentityTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ContactsManager.Core.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("6b820c12-ff44-4412-9e14-7941a869fb03"),
                            Name = "USA"
                        },
                        new
                        {
                            Id = new Guid("d736fb55-4204-41da-b3da-144b4c70dd51"),
                            Name = "UK"
                        },
                        new
                        {
                            Id = new Guid("59c3a91a-e333-409d-8d95-c6e42ccd1680"),
                            Name = "Spain"
                        },
                        new
                        {
                            Id = new Guid("28dc009e-fc31-4598-a5a5-692f3e84e0cd"),
                            Name = "Germany"
                        },
                        new
                        {
                            Id = new Guid("ffd79e28-72c6-4181-a5eb-f09b02252cd6"),
                            Name = "Canada"
                        });
                });

            modelBuilder.Entity("ContactsManager.Core.Entities.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Name")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<bool>("ReceiveNewsletters")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("People", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("7f711f5d-de40-478d-8dc1-0357d69fe70c"),
                            Address = "0205 Manley Court",
                            BirthDate = new DateTime(2007, 10, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CountryId = new Guid("6b820c12-ff44-4412-9e14-7941a869fb03"),
                            Email = "fjewess0@mozilla.org",
                            Gender = "Male",
                            Name = "Franklyn",
                            ReceiveNewsletters = false
                        },
                        new
                        {
                            Id = new Guid("5eebda1a-3bba-47e8-a030-5878484a1d01"),
                            Address = "87 Clemons Road",
                            BirthDate = new DateTime(1989, 6, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CountryId = new Guid("6b820c12-ff44-4412-9e14-7941a869fb03"),
                            Email = "bphilipeau1@cnet.com",
                            Gender = "Male",
                            Name = "Blinnie",
                            ReceiveNewsletters = true
                        },
                        new
                        {
                            Id = new Guid("b2bb228d-e31f-47b4-8fe1-2349a09c005a"),
                            Address = "11213 Pepper Wood Parkway",
                            BirthDate = new DateTime(1987, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CountryId = new Guid("d736fb55-4204-41da-b3da-144b4c70dd51"),
                            Email = "sdranfield2@weather.com",
                            Gender = "Male",
                            Name = "Stanfield",
                            ReceiveNewsletters = false
                        },
                        new
                        {
                            Id = new Guid("ea6273dc-0c9a-4e52-b65e-9244dfc7c60b"),
                            Address = "35223 Roxbury Center",
                            BirthDate = new DateTime(1997, 7, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CountryId = new Guid("d736fb55-4204-41da-b3da-144b4c70dd51"),
                            Email = "klilleycrop3@delicious.com",
                            Gender = "Male",
                            Name = "Krisha",
                            ReceiveNewsletters = true
                        },
                        new
                        {
                            Id = new Guid("fa1dd467-f430-4be3-9dc4-ed23a6b4b16e"),
                            Address = "22 Bowman Pass",
                            BirthDate = new DateTime(2007, 10, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CountryId = new Guid("59c3a91a-e333-409d-8d95-c6e42ccd1680"),
                            Email = "sseamer4@prnewswire.com",
                            Gender = "Male",
                            Name = "Sebastien",
                            ReceiveNewsletters = true
                        },
                        new
                        {
                            Id = new Guid("14c0fb52-71fd-4a56-a4bd-42ba072611ac"),
                            Address = "5352 Meadow Ridge Junction",
                            BirthDate = new DateTime(1975, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CountryId = new Guid("59c3a91a-e333-409d-8d95-c6e42ccd1680"),
                            Email = "rscrymgeour5@tripadvisor.com",
                            Gender = "Female",
                            Name = "Rubina",
                            ReceiveNewsletters = true
                        },
                        new
                        {
                            Id = new Guid("ff6db138-c462-48ad-86c4-789aecae8903"),
                            Address = "13480 Browning Way",
                            BirthDate = new DateTime(1999, 11, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CountryId = new Guid("28dc009e-fc31-4598-a5a5-692f3e84e0cd"),
                            Email = "gtempleton6@about.me",
                            Gender = "Female",
                            Name = "Gerianna",
                            ReceiveNewsletters = false
                        },
                        new
                        {
                            Id = new Guid("a78c2bbe-4037-4d9b-8db0-6ea251ece14d"),
                            Address = "99 Arrowood Crossing",
                            BirthDate = new DateTime(2000, 10, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CountryId = new Guid("28dc009e-fc31-4598-a5a5-692f3e84e0cd"),
                            Email = "vshowering7@themeforest.net",
                            Gender = "Female",
                            Name = "Veronike",
                            ReceiveNewsletters = true
                        },
                        new
                        {
                            Id = new Guid("19110652-d1be-45a1-8a2e-e9703d09496d"),
                            Address = "06224 Straubel Place",
                            BirthDate = new DateTime(2007, 3, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CountryId = new Guid("ffd79e28-72c6-4181-a5eb-f09b02252cd6"),
                            Email = "mstebbings8@godaddy.com",
                            Gender = "Male",
                            Name = "Merill",
                            ReceiveNewsletters = true
                        },
                        new
                        {
                            Id = new Guid("65ba3b4f-0f20-4251-ad75-b38cc01d0769"),
                            Address = "726 Eastwood Center",
                            BirthDate = new DateTime(2009, 4, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CountryId = new Guid("ffd79e28-72c6-4181-a5eb-f09b02252cd6"),
                            Email = "jfunnell9@e-recht24.de",
                            Gender = "Other",
                            Name = "Jasen",
                            ReceiveNewsletters = true
                        });
                });

            modelBuilder.Entity("ContactsManager.Core.IdentityEntities.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("ContactsManager.Core.IdentityEntities.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ContactsManager.Core.Entities.Person", b =>
                {
                    b.HasOne("ContactsManager.Core.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("ContactsManager.Core.IdentityEntities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("ContactsManager.Core.IdentityEntities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("ContactsManager.Core.IdentityEntities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("ContactsManager.Core.IdentityEntities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ContactsManager.Core.IdentityEntities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("ContactsManager.Core.IdentityEntities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
